import secrets
import requests
from django.contrib.auth.decorators import login_required
from django.core.mail import send_mail
from django.conf import settings
from .models import PendingUser, CustomUser, PasswordResetCode
from django.utils import timezone
from datetime import timedelta
from .forms import CustomUserCreationForm
from .models import UserProfile
from django.contrib.auth import authenticate, login
from django.contrib.auth.forms import AuthenticationForm
from django.shortcuts import render, redirect
from django.contrib import messages
from .forms import ProfileEditForm
from django.utils.timezone import now
from axes.models import AccessAttempt
from django.contrib.auth import get_backends
from axes.utils import reset
from axes.handlers.proxy import AxesProxyHandler
from django.contrib.auth.decorators import login_required


def home(request):
    return render(request, "main/home.html")


def about(request):
    return render(request, "main/about.html")


def courses(request):
    return render(request, "main/courses.html")


def contacts(request):
    return render(request, "main/contacts.html")


def login_page(request):
    return render(request, "main/login.html")

# def register(request):
#     return render(request, "main/register.html")


@login_required(login_url="login")
def profile_view(request):
    return render(request, 'main/profile.html')


def materials(request):
    return render(request, 'main/ticketsPDD.html')


@login_required
def edit_profile(request):
    profile = request.user.profile  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if request.method == 'POST':
        form = ProfileEditForm(request.POST, instance=profile)
        if form.is_valid():
            form.save()
            return redirect('profile')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
    else:
        form = ProfileEditForm(instance=profile)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ placeholder
        form.fields['first_name'].widget.attrs.update({'placeholder': profile.first_name})
        form.fields['last_name'].widget.attrs.update({'placeholder': profile.last_name})
        form.fields['phone_number'].widget.attrs.update({'placeholder': profile.phone_number})

    return render(request, 'main/editProfile.html', {'form': form})


def login_view(request):
    remaining_time = 0

    if AxesProxyHandler.is_locked(request):
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ —Å —ç—Ç–æ–≥–æ IP
        ip_attempt = AccessAttempt.objects.filter(ip_address=request.META.get('REMOTE_ADDR')).order_by(
            '-attempt_time').first()

        if ip_attempt:
            lockout_time = ip_attempt.attempt_time + timedelta(seconds=30)  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            remaining_time = max(0, int((lockout_time - now()).total_seconds()))  # –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å

        messages.error(request, f"‚è≥ –í—Ö–æ–¥ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {remaining_time} —Å–µ–∫.")
        return render(request, 'main/login.html', {'form': AuthenticationForm(), 'lockout_time': remaining_time})

    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        username = request.POST.get('username')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ä–º—ã
        if username:
            attempt = AccessAttempt.objects.filter(username=username).first()
            if attempt and attempt.failures_since_start >= 3:
                lockout_time = attempt.attempt_time + timedelta(seconds=30)
                remaining_time = max(0, int((lockout_time - now()).total_seconds()))

                if remaining_time > 0:
                    messages.error(request, f"‚è≥ –í—Ö–æ–¥ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫.")
                    return render(request, 'main/login.html', {'form': form, 'lockout_time': remaining_time})

        if AxesProxyHandler.is_locked(request):
            messages.error(request, "üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return render(request, 'main/login.html', {'form': form, 'lockout_time': 30})

        if form.is_valid():
            user = authenticate(request, username=form.cleaned_data['username'], password=form.cleaned_data['password'])

            if user is not None:
                reset(username=username)
                login(request, user)
                return redirect('home')
            else:
                # –ü–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –ª–∏–º–∏—Ç–∞
                if username:
                    attempt = AccessAttempt.objects.filter(username=username).first()
                    if attempt and attempt.failures_since_start >= 3:
                        lockout_time = attempt.attempt_time + timedelta(seconds=30)
                        remaining_time = max(0, int((lockout_time - now()).total_seconds()))
                        messages.error(request,
                                       f"‚è≥ –í—Ö–æ–¥ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫.")
                        return render(request, 'main/login.html', {'form': form, 'lockout_time': remaining_time})

                messages.error(request, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        else:
            messages.error(request, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    else:
        form = AuthenticationForm()

    return render(request, 'main/login.html', {'form': form, 'lockout_time': remaining_time})


def custom_lockout(request, credentials=None, *args, **kwargs):
    username = credentials.get('username', '') if credentials else request.POST.get('username', '')
    remaining_time = 30  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

    if username:
        attempt = AccessAttempt.objects.filter(username=username).first()
        if attempt:
            lockout_time = attempt.attempt_time + timedelta(seconds=30)
            remaining_time = max(0, int((lockout_time - now()).total_seconds()))

    messages.error(request, f"‚è≥ –í—Ö–æ–¥ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫.")
    return render(request, 'main/login.html', {'form': AuthenticationForm(), 'lockout_time': remaining_time})


def send_verification_email(pending_user):
    subject = '–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
    plain_message = f'–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_user.verification_code}'
    html_message = f'''
        <p>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
        <p style="font-size: 24px; font-weight: bold;">
            {pending_user.verification_code}
        </p>
    '''
    send_mail(
        subject,
        plain_message,
        settings.EMAIL_HOST_USER,
        [pending_user.email],
        html_message=html_message,
        fail_silently=False,
    )


def register_view(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)

        if form.is_valid():
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç hCaptcha
            captcha_response = request.POST.get('h-captcha-response')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä hCaptcha –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            captcha_verification_url = 'https://hcaptcha.com/siteverify'
            data = {
                'secret': settings.HCAPTCHA_SECRET_KEY,
                'response': captcha_response
            }
            response = requests.post(captcha_verification_url, data=data)
            result = response.json()
            print(result)
            # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ hCaptcha –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            if result.get('success'):
                email = form.cleaned_data['username']

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ —Ç–∞–∫–∞—è –µ—Å—Ç—å
                PendingUser.objects.filter(email=email).delete()

                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ PendingUser
                pending_user = PendingUser.objects.create(
                    email=email,
                    password=form.cleaned_data['password1'],
                    first_name=form.cleaned_data['first_name'],
                    last_name=form.cleaned_data['last_name'],
                    phone_number=form.cleaned_data['phone_number']
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ —Å–µ—Å—Å–∏–∏
                request.session['pending_email'] = email

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É
                send_verification_email(pending_user)

                messages.success(request, "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.")
                return redirect('verification_form')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–≤–æ–¥ –∫–æ–¥–∞
            else:
                form.add_error(None, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ hCaptcha. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

        # else:
        #     messages.error(request, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã.")
    else:
        form = CustomUserCreationForm()

    return render(request, 'main/register.html', {'form': form, "hcaptcha_site_key": settings.HCAPTCHA_SITE_KEY})


def verify_email(request):
    email = request.session.get('pending_email')

    if not email:
        messages.error(request, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        return redirect('register')

    if request.method == 'POST':
        if 'resend' in request.POST:  # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞"
            try:
                pending_user = PendingUser.objects.get(email=email)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                pending_user.verification_code = ''.join(secrets.choice('0123456789') for _ in range(5))
                pending_user.created_at = timezone.now()
                pending_user.save()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É
                send_verification_email(pending_user)
                messages.success(request, "–ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.")

            except PendingUser.DoesNotExist:
                messages.error(request, "–û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return redirect('register')

            return redirect('verification_form')

        else:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
            code = request.POST.get('code', '').strip()

            if not code.isdigit() or len(code) != 5:
                messages.error(request, "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 —Ü–∏—Ñ—Ä.")
                return redirect('verification_form')

            try:
                pending_user = PendingUser.objects.get(email=email, verification_code=code)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60 –º–∏–Ω—É—Ç)
                expiration_time = pending_user.created_at + timedelta(minutes=60)
                if timezone.now() > expiration_time:
                    pending_user.delete()
                    messages.error(request, "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
                    return redirect('verification_form')

                # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = CustomUser.objects.create_user(
                    username=pending_user.email,
                    password=pending_user.password
                )

                UserProfile.objects.create(
                    user=user,
                    first_name=pending_user.first_name,
                    last_name=pending_user.last_name,
                    phone_number=pending_user.phone_number
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                pending_user.delete()
                del request.session['pending_email']

                # üõ† –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—ç–∫–µ–Ω–¥–∞ –ø–µ—Ä–µ–¥ login
                backend = get_backends()[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –±—ç–∫–µ–Ω–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
                user.backend = f"{backend.__module__}.{backend.__class__.__name__}"

                login(request, user)

                return redirect('home')

            except PendingUser.DoesNotExist:
                messages.error(request, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                return redirect('verification_form')

    return render(request, 'main/verification_form.html', {'email': email})


def verification_form(request):
    email = request.session.get('pending_email')

    if not email:
        messages.error(request, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        return redirect('register')

    return render(request, 'main/verification_form.html', {'email': email})


def password_reset_request(request):
    hcaptcha_site_key = settings.HCAPTCHA_SITE_KEY

    if request.method == 'POST':
        email = request.POST.get('email')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ hCaptcha
        captcha_response = request.POST.get('h-captcha-response')
        if not captcha_response:
            messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç', extra_tags='captcha')
            return render(request, 'main/password_reset_request.html', {
                'hcaptcha_site_key': hcaptcha_site_key
            })

        # –í–∞–ª–∏–¥–∞—Ü–∏—è hCaptcha –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        data = {
            'secret': settings.HCAPTCHA_SECRET_KEY,
            'response': captcha_response
        }
        response = requests.post('https://hcaptcha.com/siteverify', data=data)
        result = response.json()

        if not result.get('success'):
            messages.error(request, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ hCaptcha. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', extra_tags='captcha')
            return render(request, 'main/password_reset_request.html', {
                'hcaptcha_site_key': hcaptcha_site_key
            })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ —Å–µ—Å—Å–∏–∏
        request.session['reset_email'] = email

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = CustomUser.objects.get(username=email)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã —Å–±—Ä–æ—Å–∞
            PasswordResetCode.objects.filter(user=user).delete()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ —Å–±—Ä–æ—Å–∞
            reset_code = PasswordResetCode.objects.create(user=user)

            send_mail(
                    '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - –ê–≤—Ç–æ—à–∫–æ–ª–∞ –û–Ω–ª–∞–π–Ω',
                    f'–í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {reset_code.code}\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.',
                    settings.DEFAULT_FROM_EMAIL,
                    [email],
                    fail_silently=False,
            )


            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞
            return redirect('password_reset_verify_code')

        except CustomUser.DoesNotExist:
            # –í production –Ω–µ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
            if settings.DEBUG:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ email: {email}")

            # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (security through obscurity)
            return redirect('password_reset_verify_code')

    # GET –∑–∞–ø—Ä–æ—Å - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É
    return render(request, 'main/password_reset_request.html', {
        'hcaptcha_site_key': hcaptcha_site_key
    })


def password_reset_verify_code(request):
    email = request.session.get('reset_email')
    if not email:
        return redirect('password_reset_request')

    if request.method == 'POST':
        code = request.POST.get('code')

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user = CustomUser.objects.get(username=email)
            reset_code = PasswordResetCode.objects.filter(user=user, code=code).first()

            if reset_code and reset_code.is_valid():
                reset_code.is_used = True
                reset_code.save()
                request.session['reset_user_id'] = user.id
                return redirect('password_reset_new_password')
            else:
                # –û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
                messages.error(request, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥')
        except CustomUser.DoesNotExist:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–∫–æ–µ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–∞–∫ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –∫–æ–¥–µ
            messages.error(request, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥')

    return render(request, 'main/password_reset_verify_code.html', {'email': email})


def password_reset_new_password(request):
    user_id = request.session.get('reset_user_id')
    if not user_id:
        return redirect('password_reset_request')

    try:
        user = CustomUser.objects.get(id=user_id)
    except CustomUser.DoesNotExist:
        return redirect('password_reset_request')

    if request.method == 'POST':
        new_password = request.POST.get('new_password')
        confirm_password = request.POST.get('confirm_password')

        if new_password != confirm_password:
            messages.error(request, '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
        else:
            user.set_password(new_password)
            user.save()

            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            if 'reset_email' in request.session:
                del request.session['reset_email']
            if 'reset_user_id' in request.session:
                del request.session['reset_user_id']

            messages.success(request, '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.')
            return redirect('login')

    return render(request, 'main/password_reset_new_password.html')

# Create your views here.
